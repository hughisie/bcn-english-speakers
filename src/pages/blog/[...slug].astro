---
import { type CollectionEntry, getCollection } from 'astro:content';
import Layout from '../../layouts/layout.astro';
import Container from '../../components/page-container.astro';
import Tag from '../../components/elements/tag.astro';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}

type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await post.render();

// https://docs.astro.build/en/guides/content-collections/#modifying-frontmatter-with-remark
// const { Content, remarkPluginFrontmatter } = await post.render();
// remarkPluginFrontmatter.readingTime
---

<style is:global>
  /* Unscoped, delivered as-is to the browser. */
  a {
    word-break: break-word;
  }
  a.autolink-header {
    display: inline-block;
    margin-left: 8px;
  }
  a.autolink-header svg {
    display: none;
  }
  h1:hover a.autolink-header svg,
  h2:hover a.autolink-header svg,
  h3:hover a.autolink-header svg,
  h4:hover a.autolink-header svg,
  h5:hover a.autolink-header svg,
  h6:hover a.autolink-header svg {
    display: block;
  }

  .visually-hidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: auto;
    margin: 0;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    white-space: nowrap;
  }
  .prose :where(a):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
    color: #1212c4;
    font-weight: 600;
  }
  
  .info,
  .success,
  .warning,
  .danger,
  .neutral {
    padding: 0.5rem 1rem;
    border-left: 5px solid;
  }
  .success {
    background-color: rgba(0, 225, 0, 0.1);/* #00e100 */
    border-left-color: rgba(0, 225, 0, 0.25);
  }
  .info {
    background-color: rgba(18, 18, 196, 0.1); /* #1212c4 */
    border-left-color: rgba(0, 0, 225, 0.25);
  }
  .warning {
    background-color: rgba(225, 225, 0, 0.1);/* #e1e100 */
    border-left-color: rgba(225, 225, 0, 0.25);
  }
  .danger {
    background-color: rgba(155, 0, 0, 0.2);/* #9b0000 */
    border-left-color: rgba(155, 0, 0, 0.3);
  }
  .neutral {
    background-color: rgba(120, 120, 120, 0.08);/* #787878 */
    border-left-color: rgba(120, 120, 120, 0.25);
  }
  img {
    border-radius: 0.375rem;
  }
</style>

<Layout title={post.data.title}>
  <Container>
    <article>
      <div class="mx-auto max-w-3xl mt-8 lg:mt-16">
        <Tag color='info'>
          {post.data.category}
        </Tag>
        <h1
          class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-1 lg:leading-tight">
          {post.data.title}
        </h1>
        <div class="flex gap-2 mt-3 items-center flex-wrap md:flex-nowrap">
          <span class="text-slate-600 whitespace-nowrap">
            <span class="font-light italic">by</span>{' '}{post.data.author}
          </span>
          <span class="text-slate-600">•</span>
          <time
            class="text-slate-600 whitespace-nowrap"
            datetime={post.data.publishDate.toISOString()}>
            {post.data.publishDate.toDateString()}
          </time>
          <span class="text-slate-600 hidden md:block">•</span>
          <div class="w-full md:w-auto flex flex-wrap gap-x-2">
            {
              post.data.tags.map((tag) => (
                <span class="text-sm text-slate-800">#{tag}</span>
              ))
            }
          </div>
        </div>
      </div>
  
      <div class="mx-auto prose prose-md lg:prose-lg mt-6 max-w-3xl">
        <Content />
      </div>
    </article>

    <div class="mt-6 lg:mt-12 flex justify-between mx-auto max-w-3xl">
      <a
        href="/blog"
        class="bg-gray-100 px-5 py-3 rounded-md hover:bg-gray-200 transition"
        >← Back to Blog</a
      >
      <a
        href="#"
        class="bg-gray-100 px-5 py-3 rounded-md hover:bg-gray-200 transition"
        >&uarr; Go to top</a
      >
    </div>
  </Container>
</Layout>
